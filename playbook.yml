---
# Three node deployment:
# - PostgreSQL database
# - OMERO.server
# - OMERO.web

- hosts: all
  tasks:
    - name: Set OS distribution dependent variables
      include_vars: "{{ ansible_facts['os_family'] | lower }}.yml"
      when: ansible_facts['os_family'] == "Debian"

# gather cross-host vars
- hosts: all
  tasks:
    - name: Get omero IP addresses
      set_fact:
        omero_database_address: >-
          {{ hostvars[groups['omero_database'][0]].ansible_default_ipv4.address }}
        omero_server_address: >-
            {{ hostvars[groups['omero_server'][0]].ansible_default_ipv4.address }}
        omero_web_address: >-
            {{ hostvars[groups['omero_web'][0]].ansible_default_ipv4.address }}

- hosts: omero_database
  roles:
    - role: ome.postgresql
    - role: ome.iptables_raw

  tasks:
    - name: Iptables internal hosts allow all
      become: yes
      iptables_raw_25:
        name: database_accept
        keep_unmanaged: no
        rules: |
          -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
          -A INPUT -p tcp --dport 5432 -s {{ omero_server_address }} -j ACCEPT          
        state: present
        # Highest priority
        weight: 0

  vars:
    postgresql_server_listen: "'*'"
    postgresql_server_auth:
      - database: omero
        user: omero
        address: 0.0.0.0/0
    postgresql_databases:
      - name: omero
    postgresql_users:
      - user: omero
        password: omero
        databases: [omero]
    postgresql_version: "11"

- hosts: omero_server
  roles:
    - role: ome.omero_server
    - role: ome.iptables_raw

  vars:
    omero_server_dbhost: "{{ omero_database_address }}"
    postgresql_version: "11"
    omero_server_dbuser: omero
    omero_server_dbpassword: omero

- hosts: omero_web
  roles:
    - role: ome.basedeps
    - role: ome.omero_web

  vars:
    omero_web_config_set:
      omero.web.server_list:
        - ["{{ omero_server_address }}", 4064, omero]


- hosts: omero_server omero_web

  roles:
    - role: ome.iptables_raw

  tasks:
    # Allow:
    # - all established/related in/out
    # - all internal localhost connections
    # - all internal traffic
    # - ICMP echo (ping)
    # - ssh incoming connections
    # - Public IDR ports
    - name: Iptables ssh and related
      become: yes
      iptables_raw_25:
        name: default_and_omero_external
        keep_unmanaged: no
        rules: |
          -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
          -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -i lo -j ACCEPT
          -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
          -A INPUT -p tcp -m multiport --dports {{ idr_external_tcp_ports | join(',' ) }} -j ACCEPT
        state: present
        # Highest priority
        weight: 0

    # Use a low priority REJECT rule so that clients can detect when
    # they've been rejected
    # The alternative of setting a default DROP policy will leave them
    # hanging until they timeout, though this may be preferable for public
    # servers:
    # http://www.chiark.greenend.org.uk/~peterb/network/drop-vs-reject
    - name: Iptables default
      become: yes
      iptables_raw_25:
        name: default_reject
        rules: |
          -A INPUT -j REJECT
          -A FORWARD -j REJECT
          -A OUTPUT -j ACCEPT
        state: present
        # Lowest priority
        weight: 99

  vars:
    idr_external_tcp_ports:
      - 80
      - 443
      - 4063
      - 4064
      - "14060:14079"
